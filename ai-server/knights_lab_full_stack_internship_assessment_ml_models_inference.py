# -*- coding: utf-8 -*-
"""Knights Lab Full Stack Internship Assessment: ML Models Inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13ZTPK33aqz4uZPlL-nam4mCe_H6pVrjd
"""

#!pip install ultralytics

import torch
import torchvision.transforms as T
from torchvision.models import resnet50
from torchvision.models.segmentation import deeplabv3_resnet50
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt
import numpy as np
from ultralytics import YOLO

# -----------------------------
# Load image from URL
# -----------------------------
#image_url = "https://cdn.openart.ai/uploads/image_VRdTKG3C_1718793883627_raw.jpg"
image_url = "https://images.thdstatic.com/productImages/1c654fe6-311b-4755-b501-a861c534988f/svn/brown-byblight-kitchen-dining-tables-bb-f1889yf-64_600.jpg"

response = requests.get(image_url)
image = Image.open(BytesIO(response.content)).convert("RGB")

# -----------------------------
# Classification: ResNet50 (ImageNet)
# -----------------------------
cls_model = resnet50(weights="IMAGENET1K_V1")
cls_model.eval()

imagenet_labels = requests.get("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt").text.splitlines()
input_cls = T.Compose([T.Resize((224, 224)), T.ToTensor()])(image).unsqueeze(0)

with torch.no_grad():
    out_cls = cls_model(input_cls)
    cls_id = out_cls.argmax(dim=1).item()
    cls_name = imagenet_labels[cls_id]

# -----------------------------
# Detection: YOLOv5
# -----------------------------
yolo_model = YOLO("yolov5s.pt")  # COCO-trained
yolo_results = yolo_model.predict(image, conf=0.5)[0]  # single image
yolo_boxes = yolo_results.boxes

# -----------------------------
# Segmentation: DeepLabV3 (VOC-style 21 classes)
# -----------------------------
seg_model = deeplabv3_resnet50(weights="DEFAULT")
seg_model.eval()

input_seg = T.ToTensor()(image).unsqueeze(0)

with torch.no_grad():
    seg_output = seg_model(input_seg)["out"]
    seg_mask = torch.argmax(seg_output.squeeze(), dim=0).cpu().numpy()

# -----------------------------
# Map segmentation class IDs to VOC class names
# -----------------------------
segmentation_labels = [
    'background', 'aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat',
    'chair', 'cow', 'diningtable', 'dog', 'horse', 'motorbike', 'person', 'pottedplant',
    'sheep', 'sofa', 'train', 'tvmonitor'
]

# Print unique class IDs in segmentation mask and their names
unique_ids = np.unique(seg_mask)
print("\n Segmentation: Detected classes in the image (class ID : class name):")
for class_id in unique_ids:
    if class_id < len(segmentation_labels):
        print(f"  {class_id:2} : {segmentation_labels[class_id]}")
    else:
        print(f"  {class_id:2} : <unknown>")


# Visualization
# -----------------------------
plt.figure(figsize=(18, 6))

# Classification
plt.subplot(1, 3, 1)
plt.imshow(image)
plt.title(f"Classification: {cls_name}")
plt.axis("off")

# Detection
plt.subplot(1, 3, 2)
plt.imshow(image)
ax = plt.gca()
for box in yolo_boxes:
    x1, y1, x2, y2 = box.xyxy[0]
    conf = box.conf[0].item()
    cls = int(box.cls[0].item())
    label = yolo_model.model.names[cls]
    rect = plt.Rectangle((x1, y1), x2 - x1, y2 - y1, fill=False, edgecolor='lime', linewidth=2)
    ax.add_patch(rect)
    ax.text(x1, y1 - 5, f"{label} ({conf:.2f})", color='lime', fontsize=8)
plt.title("Detection: YOLOv5")
plt.axis("off")

# Segmentation
plt.subplot(1, 3, 3)
seg_mask[seg_mask != 8] = 0
plt.imshow(seg_mask)
plt.title("Segmentation: DeepLabV3")
plt.axis("off")

plt.tight_layout()
plt.show()

